// Mocks generated by Mockito 5.2.0 from annotations
// in menu/test/src/products/domain/usecases/get_products_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:menu/src/products/domain/repositories/get_products_repository.dart'
    as _i2;
import 'package:menu/src/products/infrastructure/datasources/get_products_datasource.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [GetProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsRepository extends _i1.Mock
    implements _i2.GetProductsRepository {
  MockGetProductsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> call() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
}

/// A class which mocks [GetProductsDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsDatasource extends _i1.Mock
    implements _i4.GetProductsDatasource {
  MockGetProductsDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
}
